// $Id: YYParser.h,v 1.1 2013/02/12 18:56:16 david Exp $ -*- c++ -*-
#ifndef __PF2ASM_YYPARSER_H__
#define __PF2ASM_YYPARSER_H__

#include <iostream>
#include <cdk/Compiler.h>
#include <cdk/Parser.h>
#include "PFScanner.h"

namespace pf2asm {

  /**
   * This class corresponds to the parser as implemented by the pair
   * Flex+BYACC. Together, they scan the input and build the syntax
   * treee.
   * @see cdk::syntax::Parser
   * @see cdk::Compiler
   */
  class YYParser: public cdk::Parser {

    cdk::Compiler *_compiler = nullptr;

    //! @var _scanner is a global reference to the scanner (used to (re)set i/o streams)
    FlexLexer *_scanner;

  public:
    inline YYParser() :
        cdk::Parser(), _scanner(new PFScanner(nullptr, nullptr)) {
    }

  public:
    inline FlexLexer *scanner() {
      return _scanner;
    }
    inline void scanner(FlexLexer *scanner) {
      _scanner = scanner;
      switchStreams();
    }

    /**
     * Update the scanner's input and output streams.
     */
    void switchStreams() {
      _scanner->switch_streams(&istream(), &ostream());
    }

  public:
    int parse(cdk::Compiler *compiler) {
      _compiler = compiler;
      return yyparse();
    }

    void yyerror(const char * const s) const {
      std::cerr << _scanner->lineno() << ": " << s << std::endl;
    }

    /**
     * Access to the tokenization engine.
     * @return 0 when the end of file is reached.
     */
    int yylex() {
      return _scanner->yylex();
    }

    /**
     * This is the main parsing function.
     * It is automatically generated by 'byacc'
     */
    int yyparse();

  };

} // namespace pf2asm

#endif

// $Log: YYParser.h,v $
// Revision 1.1  2013/02/12 18:56:16  david
// Major code cleanup and simplification. Uses CDK8. C++11 is required.
//
// Revision 1.5  2009/03/02 13:26:51  david
// Code cleanup. Removed a few minor warnings.
//
// Revision 1.4  2009/02/28 21:01:07  david
// Minor cleanup.
//
// Revision 1.3  2009/02/28 19:58:03  david
// Introduced integer expressions with literals only (i.e., no variables).
// It is now possible to write 16*1024+8.
//
// Revision 1.2  2009/02/25 07:32:01  david
// First working version of pf2asm. This version still uses
// byacc.
//
// Revision 1.1  2009/02/23 20:53:39  david
// First PF implementation. Does not work with PF syntax nor
// does it do anything useful.
//
